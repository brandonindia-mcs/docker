FROM mcr.microsoft.com/azure-cli AS extensions
CMD [ "/bin/bash" ]
RUN apk update && apk upgrade
RUN az config set extension.use_dynamic_install=yes_without_prompt

FROM extensions as azext
RUN az extension add --name azure-devops \
&& az extension add --name datafactory \
&& az extension add --name logic

FROM azext AS rootuser
ARG THISUSER=root
ARG HOMEDIR=
ARG USERHOME=$HOMEDIR/$THISUSER

FROM rootuser AS docker
#RUN /usr/bin/dockerd
RUN apk add docker
RUN echo -e "\n"\
"if ps -o pid,ppid,user,args|grep docker|grep -v \$\$ >/dev/null;then echo docker is running;else\n"\
"echo Run this to start docker: '/usr/bin/dockerd&';fi\n"\
\
>>$USERHOME/.bashrc

FROM docker AS bottom
WORKDIR $USERHOME
COPY assets.docker/bashrc.uuid /tmp/uuid
RUN cat /tmp/uuid >>$USERHOME/.bashrc && rm -rf /tmp/uuid
ENV HISTFILESIZE=-1
RUN cp /usr/share/zoneinfo/America/Chicago /etc/localtime
RUN echo -e \
"apk update && apk upgrade\n"\
"echo && grep -i pretty /etc/os-release\n"\
"echo && az version -o table\n"\
"echo && az extension list -o table --query \"[].{name:name,version:version}\"\n"\
"alias ls=\"/bin/ls -Altr --color=auto\"\n"\
"alias azt=\"az login -t \\\${AZTENANT} >/dev/null && azwho\"\n"\
"alias azp=\"az login --service-principal -u \\\${SUPER} -t \\\${AZTENANT} -p \\\${CERT} >/dev/null && azwho\"\n"\
"alias azwho=\"az account show --query \\\"{Subscription:name,Type:user.type,User:user.name}\\\" -o table\"\n"\
"alias getsuper=\"az ad sp list --spn \\\$SUPER --query \\\"[].{SPN:appId,Name:displayName,Type:servicePrincipalType}\\\" -o table\"\n"\
\
>>$USERHOME/.bashrc
# alias azwho="az account show --query \\\"{Subscription:name,Type:user.type,UserName:user.name}\\\" -o table"\n\

RUN echo -e \
"function prune { signin && rglist=./rg.list && if [ ! -f \$rglist ];then echo \$rglist not found && return 1;fi && for guid in \$(cat \$rglist);do deleterg \$guid; sed -i -e "/\$guid/d" \$rglist;done }\n"\
"function signin { az login --service-principal -u \${SUPER} -t \${AZTENANT} -p \${CERT} >/dev/null && az account show --query \"{Type:user.type,User:user.name,Subscription:name}\" ; }\n"\
"function signout { az logout; }\n"\
"function deleterg { for rg in \$*; do echo deleting \$rg && az group delete -n \$rg -y 2>/dev/null; done; }\n"\
"function newrg { if [ \$# -ne 2 ]; then echo \"Usage: \$FUNCNAME <name> <location>\" && return 9; fi && signin && az group create -n \$1 -l \$2; signout; }\n"\
"function bicep { signin && az deployment group create -n \$rg -g \$rg --template-file main.bicep --parameters @parameters.main.json \$*; signout; }\n"\
\
"echo -e \"\\\\\\\n\\\\\\\nCommands & Aliases...\"\n"\
"for alias_key in \${!BASH_ALIASES[@]}; do echo \$alias_key = \${BASH_ALIASES[\$alias_key]}; done\n"\
\
>>$USERHOME/.bashrc

RUN echo -e \
"echo -e \"\\\naz login -t \\\${AZTENANT} \\ \n && az account set --subscription \"\\\${AZSUB}\"\\\n\"\n"\
"echo -e \"\ndefault super is: \n\t\${SUPER}\n\t\${AZTENANT}\n\t\${CERT}\"\n"\
\
>>$USERHOME/.bashrc

FROM bottom as final
RUN echo -e "\n"\
"if [ -x /root/codestore/PS1.sh ];then if [ \$(grep -E '^export PS1' /root/.bashrc|wc -l) -eq 0 ];then /root/codestore/PS1.sh;fi;fi\n"\
>>$USERHOME/.bashrc

RUN echo -e '\n\
function changetext { printf "\e[$1;$2;$3m${*:4}\e[0m " ; }\n\
function println { printf "$1\\n" "${@:2}"; }\n\
function green { changetext 0 34 42 $* ; }\n\
function yellow { changetext 0 31 43 $* ; }\n\
function blue { changetext 0 36 44 $*; }\n\
function cyan { changetext 0 0 46 $*; }\n\
function grey { changetext 1 39 100 $* ; }\n\
'\
>>$USERHOME/.bashrc

FROM final as scripts1
RUN echo -e '\n\
function service_principal {\n\
if [ -z $1 -o -z $2 ]; then echo Usage: $FUNCNAME[0] name location && return 9;fi\n\
azt\n\
run=\n\
username="$1"\n\
loc="$2"\n\
certname="${username}${UUID}${run}"\n\
certstore="${HOME}/keystore/certs"\n\
kv="${username}ServicePrincipalSecrets${UUID}"\n\
superuser=${username}User\n\
scope="/subscriptions/${AZSUB}"\n\
rg=ServicePrincipal\n\
\n\
az group create -n ${rg,,} -l ${loc} && echo created group ${rg,,}\n\
az keyvault create -n ${kv} -g ${rg} && echo created vault ${kv}\n\
az keyvault certificate create -n ${certname} --vault-name=${kv} --policy "$(az keyvault certificate get-default-policy)" && echo created cert ${certname}\n\
az keyvault certificate download -n ${certname} --vault-name ${kv} --file ${certstore}/${certname}.pem \\\n\
&& openssl x509 -in ${certstore}/${certname}.pem -inform PEM -noout -sha1 -fingerprint && echo -e "got ${certstore}/${certname}.pem\\ndid validation"\n\
az ad sp create-for-rbac -n ${superuser} --role Owner --scopes ${scope} --cert @${certstore}/${certname}.pem && echo Added ${superuser}\n\
az keyvault secret download -n ${certname} --file ${certstore}/${certname}.pfx --vault-name ${kv} --encoding base64 \\\n\
&& openssl pkcs12 -in ${certstore}/${certname}.pfx -passin pass: -out ${certstore}/${certname}.private.pem -nodes \\\n\
&& chmod 444 ${certstore}/${certname}.private.pem \\\n\
&& echo -e "got ${certstore}/${certname}.pfx:\\n$(/bin/ls -l ${certstore}/${certname}.private.pem)" \\\n\
&& export SUPERNAME=$(az ad sp list --display-name ${superuser} --query "[].{x:appDisplayName}" -o tsv) \\\n\
&& export SUPER=$(az ad sp list --display-name ${superuser} --query "[].{x:appId}" -o tsv) \\\n\
&& export CERT=${certstore}/${certname}.private.pem\n\
az ad sp list --display-name ${superuser} --query "[].{Name:appDisplayName,ID:appId}" -o table\n\
azp && azwho \\\n\
|| unset $run $username $certname $certstore $kv $superuser $scope $rg $loc\n\
}\n\
'\
>>$USERHOME/.bashrc

FROM scripts1 as scripts2

ARG GIT_SSH=$USERHOME/bin/git-ssh
ENV GIT_SSH=$GIT_SSH

ARG myfname
ARG mymname
ARG mylname
ARG myemail
ARG mykeypath
RUN mkdir -p $USERHOME/bin\
&& echo -e "\n"\
"if [ -z \$myfname ];then myname=anonymous;else myname=\"\$myfname \$mymname \$mylname\";fi\n"\
"echo|cat >$USERHOME/.gitconfig <<EOF\n"\
"# This is Git's per-user configuration file.\n"\
"[user]\n"\
"        name = \$myname\n"\
"        email = \$myemail\n"\
"[advice]\n"\
"        addIgnoredFile = false\n"\
"[core]\n"\
"        excludesfile = ~/gitignore_global\n"\
"        editor = vim\n"\
"[ssh]\n"\
"        identity = \$mykeypath\n"\
"[commit]\n"\
"        template = ~/.stCommitMsg\n"\
"[pull]\n"\
"        rebase = false\n"\
"[credential]\n"\
"        useHttpPath = true\n"\
"[init]\n"\
"        defaultBranch = master\n"\
"EOF\n"\
\
>>$USERHOME/.bashrc

RUN echo -e "\n"\
"echo|cat >$USERHOME/bin/git-ssh <<EOF\n"\
"#!/bin/sh\n"\
"\n"\
"#WORKS IN COMBINATION WITH GIT_SSH SESSION & [SSH] CLAUSE FROM GBL CONFIG\n"\
"#https://superuser.com/questions/232373/how-to-tell-git-which-private-key-to-use\n"\
"ssh -i \\\$(git config --get ssh.identity) -F /dev/null -p 22 \\\$*\n"\
"EOF\n"\
\
>>$USERHOME/.bashrc

COPY assets.docker/.gitignore_global $USERHOME/.gitignore_global

RUN echo -e "\n"\
"chmod 644 $USERHOME/gitignore_global && chmod 755 \$GIT_SSH\n"\
"function unindex { /usr/bin/git update-index --skip-worktree \"\${*}\"; }\n"\
"function reindex { /usr/bin/git update-index --no-skip-worktree \"\${*}\"; }\n"\
"function hardlink_working_directory { if [ ! -z \$1 ] && [ -d \$1 ];then src_dir=\$1;else echo pass source directory as arg1 && return \$LINENO; fi && for f in \$(/bin/ls -A);do echo -n \$f && rm \$f && ln \${src_dir}/\${f} && echo \" linked\";done ; }\n"\
\
>>$USERHOME/.bashrc

COPY assets.docker/gitprompt-root.sh $USERHOME/gitprompt.sh

FROM scripts2 as scripts3
RUN echo -e "\n"\
"alias aztenant=\"echo \${AZTENANT}:\${AZTENANTID}:\${AZSUB}:\${AZSUBSCRIPTION}\"\n"\
"echo Azure settings: && aztenant\n"\
\
>>$USERHOME/.bashrc

FROM scripts3 as lastbuild
RUN date=$(date) && echo -e "echo -e \"\\\nLast Build Date: ${date}\""\
>>$USERHOME/.bashrc
