FROM ez4mcs/gituser as gituser
ARG THISUSER=$gituser
ARG HOMEDIR=$HOMEDIR
ARG USERHOME=$HOMEDIR/$THISUSER
WORKDIR $USERHOME


FROM gituser as azcli
#AZURE CLI
RUN curl -sL https://aka.ms/InstallAzureCLIDeb | sudo /bin/bash
RUN sudo apt-get install -qq \
  ca-certificates \
  curl \
  apt-transport-https \
  lsb-release \
  gnupg \
&& sudo apt-get update
RUN curl -sL https://packages.microsoft.com/keys/microsoft.asc \
  | gpg --dearmor \
  | sudo tee /etc/apt/trusted.gpg.d/microsoft.gpg > /dev/null
RUN AZ_REPO=$(lsb_release -cs) \
&& echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" \
| sudo tee /etc/apt/sources.list.d/azure-cli.list \
&& sudo apt-get -y update \
&& sudo apt-get -y install \
  azure-cli
###Command group 'config' is experimental and under development. Reference and support levels: https://aka.ms/CLI_refstatus
#RUN az config set auto-upgrade.enable=no
RUN echo 'blue "################## AZ CLI ##################" && echo\n\
blue "AZ CLI:" && az -v\n\
'\
>>$USERHOME/.bashrc
RUN az extension add --name azure-devops


### SKIPPED 12-MAR-22 bindia ###
FROM azcli as powershell
RUN sudo apt-get install -y wget apt-transport-https software-properties-common \
&& wget -q https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb \
&& sudo dpkg -i packages-microsoft-prod.deb \
&& sudo apt-get update \
&& sudo add-apt-repository universe \
&& sudo apt-get install -y powershell

RUN echo '\n\
blue "PowerShell:" && pwsh -v\n\
alias psh=pwsh\n\
'\
>>$USERHOME/.bashrc


### SKIPPED 12-MAR-22 bindia ###
FROM azcli as powershellaz
ARG INSTALLPSHMOD="Install-Module -Name Az -Scope CurrentUser -Repository PSGallery -Force"
ARG PSHMOD=/tmp/install_az.ps1
RUN echo $INSTALLPSHMOD >$PSHMOD
#RUN echo $(/usr/bin/pwsh <<<"$PSHMOD")
# RUN /usr/bin/pwsh <<echo "$PSHMOD"

FROM azcli as ntpsync
### NTP ###
ENV DEBIAN_FRONTEND=noninteractive

RUN sudo ln -fs /usr/share/zoneinfo/CST6CDT /etc/localtime \
&& DEBIAN_FRONTEND=noninteractive \
sudo apt-get install -y --no-install-recommends \
tzdata \
&& sudo dpkg-reconfigure --frontend noninteractive tzdata

RUN sudo ln -fs /usr/share/zoneinfo/UTC /etc/localtime \
&& sudo apt-get install -qq tzdata \
&& sudo dpkg-reconfigure --frontend noninteractive tzdata \
&& sudo apt-get -qq update
RUN sudo apt-get -qq install \
ntp \
ntpdate \
ntpstat
ARG APOSTROPHE="'"
RUN echo '\n\
function ntpsync() {\n\
blue "################## Doing NTP sync... ##################" && echo\n\
if ! sudo service ntp status;then sudo ntpdate time.nist.gov && sudo service ntp start;fi\n\
ntp_tries=8 && ntp_delay_seconds=10 && i=0\n\
while ! ntpstat >/dev/null 2>&1\n\
   do sleep ${ntp_delay_seconds} && echo synching... && i=`expr ${i} + 1`\n\
   if [ ${i} -ge ${ntp_tries} ]\n\
      then break\n\
   fi\n\
done\n\
if ntpstat >/dev/null 2>&1\n\
   then green "NTP:" && ntpstat\n\
   else yellow "NTP:" && echo "can'$APOSTROPHE't confirm ntp sync"\n\
fi\n\
}\n\
'\
>>$USERHOME/.bashrc

FROM ntpsync as loadnode
RUN echo '\n\
function installnode() {\n\
cyan "Updating nvm:" && echo $(cd .nvm && git pull)\n\
if  ! command -v nvm >/dev/null; then\n\
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm\n\
[ -s "$NVM_DIR/bash_completion" ] && . "$NVM_DIR/bash_completion"  # This loads nvm bash_completion\n\
fi\n\
}\n\
#echo $PATH\n\
function installnodeaz() {\n\
blue "################## NODE AZURE FUNCTIONS ##################" && echo\n\
local coreversion=$1\n\
if ! npm list -g azure-functions-core-tools@$coreversion\n\
then npm install -g azure-functions-core-tools@$coreversion --unsafe-perm true\n\
fi\n\
}\n\
function nodever() {\n\
  if [ ! -z $1 ]; then\n\
    nvm install ${1} >/dev/null 2>&1 && nvm use ${_} > /dev/null 2>&1\\\n\
      && nvm alias default ${_} > /dev/null 2>&1; blue "Node:"; node -v; else\n\
    yellow "Use nodever to install or switch node versions:" && echo -e "\\n usage: nodever [ver]"\n\
    blue "Node:" && node -v\n\
    blue "npm:" && npm -v && npm list -g azure-functions-core-tools\n\
    blue "nvm:" && nvm -v\n\
  fi\n\
}\n\
function getyarn() {\n\
if ! command -v yarn >/dev/null 2>&1; then grey "Getting yarn: " && npm install --global yarn >/dev/null; fi\n\
}\n\
function loadnode() {\n\
blue "################## NODE VIA NVM ##################" && echo\n\
installnode\n\
blue "################## YARN - NEEDS NVM ##################" && echo\n\
getyarn\n\
nodever\n\
}\n\
'\
>>$USERHOME/.bashrc
ARG PACKAGE="function PACKAGE { echo \$(node -p \"try { require('./package.json').name } catch(e) {}\"); }"
RUN echo '\n\
'$PACKAGE'\n\
'\
>>$USERHOME/.bashrc

FROM loadnode as bashrc
ARG DOCKER_ENV
ENV DOCKER_ENV=$DOCKER_ENV
RUN echo '\n\
if touch ${HOME}/history/${DOCKER_ENV}.history;then export HISTFILE="${HOME}/history/${DOCKER_ENV}.history" && green "Persistent history at:" && echo ${HISTFILE};else grey History not persistent;fi \n\
function unindex { /usr/bin/git update-index --skip-worktree "${*}"; }\n\
function reindex { /usr/bin/git update-index --no-skip-worktree "${*}"; }\n\
'\
>>$USERHOME/.bashrc
ARG line="set tabstop=8 softtabstop=0 expandtab shiftwidth=4 smarttab autoindent"
ARG line="$line\nset number"
ARG line="$line\nset nocompatible"
ARG line="$line\nsyntax on"
ARG line="$line\ncolo pablo"
ARG line="$line\nset cursorline"
ARG line="$line\nhi CursorLine   cterm=NONE ctermbg=NONE ctermfg=NONE"
ARG line="$line\nhi CursorLineNr   cterm=NONE ctermbg=36 ctermfg=NONE"
RUN echo "$line" >$USERHOME/.vimrc

#WORKDIR $USERHOME
RUN mkdir $USERHOME/codestore
VOLUME $USERHOME/codestore
RUN mkdir $USERHOME/history
VOLUME $USERHOME/history

COPY assets.docker/bashrc.uuid /tmp/uuid
RUN cat /tmp/uuid >>$USERHOME/.bashrc  && sudo rm -rf /tmp/uuid

#COPY assets.docker/AZ_ENV /tmp/AZ_ENV
#RUN cat /tmp/AZ_ENV >>$USERHOME/.bashrc  &&  sudo rm -rf /tmp/AZ_ENV 

# RUN echo '\n\
# export PS1="\\[\\033[1;35m\\]\\u\\[\\033[0m\\]@\\[\\033[1;35m\\]\\h:\\[\\033[0;37m\\]\\w\\[\\033[1;301m\\]\\$\\[\\033[0m\\] " \n\
# '\
# >>$USERHOME/.bashrc

FROM bashrc as nodeinstall
### NVM *must have* NVM_DIR
ENV NVM_DIR=$USERHOME/.nvm
ENV NVM_HOME=$NVM_DIR
RUN git clone https://github.com/nvm-sh/nvm.git $NVM_DIR
RUN echo $([ -s $NVM_DIR/nvm.sh ] \
&& . $NVM_DIR/nvm.sh \
&& [ -s $NVM_DIR/bash_completion ] \
&& . $NVM_DIR/bash_completion \
&& nvm install --lts)

FROM nodeinstall AS gitconfig
RUN sudo apt-get update -qq

RUN echo '\n\
echo|cat >.gitconfig <<EOF\n\
# This is Git's per-user configuration file.\n\
[user]\n\
# Please adapt and uncomment the following lines:\n\
        name = $myname\n\
        email = $myemail\n\
[advice]\n\
        addIgnoredFile = false\n\
[core]\n\
        excludesfile = ~/.gitignore_global\n\
        editor = vim\n\
[ssh]\n\
        identity = $mykeypath\n\
[commit]\n\
        template = ~/.stCommitMsg\n\
[pull]\n\
        rebase = false\n\
EOF\n\
'\
>>$USERHOME/.bashrc

ARG HASH="#"
RUN echo "\n\
echo|cat >bin/git-ssh <<EOF\n\
$HASH!/bin/sh\n\
\n\
$HASH WORKS IN COMBINATION WITH GIT_SSH SESSION & [SSH] CLAUSE FROM GBL CONFIG\n\
$HASH https://superuser.com/questions/232373/how-to-tell-git-which-private-key-to-use\n\
\n\
ssh -i \\\$(git config --get ssh.identity) -F /dev/null -p 22 \\\$*\n\
EOF\n\
"\
>>$USERHOME/.bashrc

